{"version":3,"sources":["app/store/selectors.ts","app/store/slices/profileSlice.ts","app/pages/Profile.tsx","app/store/thunks.ts","App.tsx","serviceWorker.js","app/store/index.ts","index.tsx"],"names":["selectProfile","state","profile","initialState","loading","data","undefined","error","profileSlice","createSlice","name","reducers","loadRequest","loadSuccess","action","payload","loadFailure","actions","Profile","useSelector","dispatch","useDispatch","useEffect","axios","then","response","catch","console","avatar","avatar_url","blog","url","html_url","className","src","alt","href","target","rel","size","App","Boolean","window","location","hostname","match","store","configureStore","reducer","profileReducer","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"yPAEaA,EAAgB,SAACC,GAAD,OAAsBA,EAAMC,S,wBCEnDC,EAA6B,CACjCC,SAAS,EACTC,UAAMC,EACNC,WAAOD,GAGIE,EAAeC,YAAY,CACtCC,KAAM,UACNP,eACAQ,SAAU,CACRC,YAAa,SAAAX,GACXA,EAAMG,SAAU,GAElBS,YAAa,SAACZ,EAAOa,GACnBb,EAAMG,SAAU,EAChBH,EAAMI,KAAOS,EAAOC,SAEtBC,YAAa,SAACf,EAAOa,GACnBb,EAAMG,SAAU,EAChBH,EAAMM,MAAQO,EAAOC,Y,EAK8BP,EAAaS,QAAvDL,E,EAAAA,YAAaC,E,EAAAA,YAAaG,E,EAAAA,YAE1BR,IAAf,QCwCeU,MA3Df,WAAoB,IAAD,EACgBC,YAAYnB,GAArCI,EADS,EACTA,QAASC,EADA,EACAA,KAAME,EADN,EACMA,MACjBa,EAAWC,cAMjB,GAJAC,qBAAU,WACRF,GCXmC,SAACA,GACtCA,EAASR,KAETW,IAAM,6CACLC,MAAK,SAAAC,GACJL,EAASP,EAAYY,EAASpB,UAC7BqB,OAAM,SAAAnB,GACPoB,QAAQpB,MAAMA,GAEda,EAASJ,EAAYT,YDGpB,CAACa,IAEAb,EACF,OAAQ,sDATO,MAgBbF,GAAQ,GAJEuB,EAZG,EAYfC,WACAnB,EAbe,EAafA,KACAoB,EAde,EAcfA,KACUC,EAfK,EAefC,SAGF,OACE,yBAAKC,UAAU,4BACb,yBAAKA,UAAU,0BACb,yBAAKA,UAAS,8CAA0C7B,EAA0B,mBAAhB,gBAChE,yBAAK8B,IAAKN,EAAQK,UAAU,+BAA+BE,IAAI,WAC/D,wBAAIF,UAAU,sBAAsBvB,GACpC,uBAAGuB,UAAU,mDACX,kBAAC,IAAD,MACA,0BAAMA,UAAU,QAAhB,6BAEF,uBAAGA,UAAU,yCACX,uBAAGG,KAAML,EAAKM,OAAO,SAASC,IAAI,sBAAsBL,UAAU,QAChE,kBAAC,IAAD,OAEF,uBAAGG,KAAMN,EAAMO,OAAO,SAASC,IAAI,sBAAsBL,UAAU,QACjE,kBAAC,IAAD,SAIP7B,GAAY,yBAAK6B,UAAU,sBAAqB,kBAAC,cAAD,CAAaM,KAAM,QAEpE,yBAAKN,UAAU,uBACb,6BACE,kJACA,uBAAGA,UAAU,YAAb,+BAAoD,0BAAMA,UAAU,iBAAhB,iCAApD,iDAAsK,0BAAMA,UAAU,wBAAhB,iCAAtK,iBACA,uBAAGA,UAAU,YAAb,wDAAwE,0BAAMA,UAAU,iBAAhB,wBAAxE,+EAEF,yBAAKA,UAAU,yCACb,kBAAC,IAAD,CAASA,UAAU,cACnB,kBAAC,IAAD,CAAcA,UAAU,cACxB,kBAAC,IAAD,CAAUA,UAAU,cACpB,kBAAC,IAAD,CAAQA,UAAU,cAClB,kBAAC,IAAD,CAAQA,UAAU,cAClB,kBAAC,IAAD,CAAaA,UAAU,cACvB,kBAAC,IAAD,CAAQA,UAAU,kBEnDbO,MARf,WACE,OACE,yBAAKP,UAAU,4CACb,kBAAC,EAAD,QCKcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCfN,IASeC,EATDC,YAAe,CAC3BC,QAAS,CACP9C,QAAS+C,KCIbC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,QAGJO,SAASC,eAAe,SFoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdjC,OAAM,SAAAnB,GACLoB,QAAQpB,MAAMA,EAAMqD,c","file":"static/js/main.4f3551ac.chunk.js","sourcesContent":["import { RootState } from './index';\n\nexport const selectProfile = (state: RootState) => state.profile;","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { GithubProfile, ProfileState } from 'app/store/types';\n\nconst initialState: ProfileState = {\n  loading: true,\n  data: undefined,\n  error: undefined,\n};\n\nexport const profileSlice = createSlice({\n  name: 'profile',\n  initialState,\n  reducers: {\n    loadRequest: state => {\n      state.loading = true;\n    },\n    loadSuccess: (state, action: PayloadAction<GithubProfile>) => {\n      state.loading = false;\n      state.data = action.payload;\n    },\n    loadFailure: (state, action: PayloadAction<string>) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n  },\n});\n\nexport const { loadRequest, loadSuccess, loadFailure } = profileSlice.actions;\n\nexport default profileSlice.reducer;","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { ClockLoader } from 'react-spinners';\nimport { FaGithub, FaLinkedin } from 'react-icons/fa';\nimport { MdEmail } from 'react-icons/md';\nimport { DiJavascript, DiCss3, DiJira, DiLess, DiReact, DiWordpress, DiNodejs } from 'react-icons/di';\n\nimport { selectProfile } from 'app/store/selectors';\nimport { loadGithubProfile } from 'app/store/thunks';\n\nfunction Profile() {\n  const { loading, data, error } = useSelector(selectProfile);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadGithubProfile());\n  }, [dispatch]);\n\n  if (error) {\n    return (<div>Something went wrong!</div>);\n  }\n  const {\n    avatar_url: avatar,\n    name,\n    blog,\n    html_url: url,\n  } = data || {};\n\n  return (\n    <div className=\"h-screen w-full flex p-4\">\n      <div className=\"w-1/3 p-10 text-center\">\n        <div className={`transition duration-700 ease-in-out ${!loading ? 'opacity-100' : 'opacity-0 hidden'}`}>\n          <img src={avatar} className=\"rounded-full mb-12 shadow-xl\" alt=\"avatar\" />\n          <h1 className=\"text-3xl font-bold\">{name}</h1>\n          <p className=\"flex items-center justify-center italic text-xl\">\n            <MdEmail />\n            <span className='ml-2'>melancholy14@hotmail.com</span>\n          </p>\n          <p className=\"flex items-center justify-center my-2\">\n            <a href={url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"mx-4\">\n              <FaGithub />\n            </a>\n            <a href={blog} target=\"_blank\" rel=\"noopener noreferrer\" className=\"mx-4\">\n              <FaLinkedin />\n            </a>\n          </p>\n        </div>\n      {loading && (<div className=\"w-40 mx-auto my-20\"><ClockLoader size={150} /></div>)}\n      </div>\n      <div className=\"w-2/3 p-10 text-2xl\">\n        <div>\n          <p>A well-organised and confident post-grad Software Engineer, looking to pursue a new career in software development.</p>\n          <p className=\"text-3xl\">As a software engineer with <span className=\"font-semibold\">React and Redux, Java and AWS</span>, I was in the technical team responsible for <span className=\"font-semibold italic\">offering an e-commerce system</span> for 2 years.</p>\n          <p className=\"text-3xl\">Currently, Iâ€™m working as a web developer using <span className=\"font-semibold\">React and Typescript</span> in order to build web applications to provide positive effect on society.</p>\n        </div>\n        <div className=\"flex items-center justify-start mt-10\">\n          <DiReact className=\"w-16 h-16\" />\n          <DiJavascript className=\"w-16 h-16\" />\n          <DiNodejs className=\"w-16 h-16\" />\n          <DiCss3 className=\"w-16 h-16\" />\n          <DiLess className=\"w-12 h-12\" />\n          <DiWordpress className=\"w-12 h-12\" />\n          <DiJira className=\"w-12 h-12\" />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Profile;\n","import axios from 'axios';\n\nimport { loadRequest, loadFailure, loadSuccess } from './slices/profileSlice';\nimport { AppDispatch } from '.';\n\nexport const loadGithubProfile = () => (dispatch: AppDispatch) => {\n  dispatch(loadRequest());\n\n  axios('https://api.github.com/users/melancholy14')\n  .then(response => {\n    dispatch(loadSuccess(response.data));\n  }).catch(error => {\n    console.error(error);\n\n    dispatch(loadFailure(error));\n  });\n}","import React from 'react';\n\nimport Profile from './app/pages/Profile';\n\nfunction App() {\n  return (\n    <div className=\"App overflow-auto bg-teal-900 text-white\">\n      <Profile />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { configureStore } from '@reduxjs/toolkit';\nimport profileReducer from './slices/profileSlice';\n\nconst store = configureStore({\n  reducer: {\n    profile: profileReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport store from './app/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}